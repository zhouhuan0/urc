<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yks.urc.mapper.IRoleMapper">
    <resultMap id="BaseResultMap" type="com.yks.urc.entity.RoleDO">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="role_id" jdbcType="BIGINT" property="roleId"/>
        <result column="role_name" jdbcType="VARCHAR" property="roleName"/>
        <result column="is_active" jdbcType="TINYINT" property="isActive"/>
        <result column="is_authorizable" jdbcType="TINYINT" property="isAuthorizable"/>
        <result column="is_forever" jdbcType="TINYINT" property="isForever"/>
        <result column="effective_time" jdbcType="TIMESTAMP" property="effectiveTime"/>
        <result column="expire_time" jdbcType="TIMESTAMP" property="expireTime"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="create_by" jdbcType="VARCHAR" property="createBy"/>
        <result column="modified_time" jdbcType="TIMESTAMP" property="modifiedTime"/>
        <result column="modified_by" jdbcType="VARCHAR" property="modifiedBy"/>
        <result column="remark" jdbcType="VARCHAR" property="remark"/>
    </resultMap>
    <sql id="Base_Column_List">
     id,role_id, role_name, is_active, is_authorizable, is_forever, effective_time, expire_time,
     create_time, create_by, modified_time, modified_by,remark
   </sql>

    <insert id="insert" parameterType="com.yks.urc.entity.RoleDO">
    insert into urc_role
     (role_id,role_name, is_active,
      is_authorizable, is_forever, effective_time,
      expire_time, create_time, create_by,
      modified_time, modified_by)
    values
     (#{roleId}, #{roleName,jdbcType=VARCHAR}, #{isActive,jdbcType=TINYINT},
      #{isAuthorizable,jdbcType=TINYINT}, #{isForever,jdbcType=TINYINT}, #{effectiveTime,jdbcType=TIMESTAMP},
      #{expireTime,jdbcType=TIMESTAMP}, #{createTime,jdbcType=TIMESTAMP}, #{createBy,jdbcType=VARCHAR},
      #{modifiedTime,jdbcType=TIMESTAMP}, #{modifiedBy,jdbcType=VARCHAR})
  </insert>

    <insert id="insertOrUpdate" useGeneratedKeys="true" keyProperty="id" parameterType="com.yks.urc.entity.RoleDO">
    insert into urc_role
     (role_name, is_active,
      is_authorizable, is_forever, effective_time,
      expire_time, create_time, create_by,
      modified_time, modified_by)
      values
      ( #{roleName,jdbcType=VARCHAR}, #{isActive,jdbcType=TINYINT},
      #{isAuthorizable,jdbcType=TINYINT}, #{isForever,jdbcType=TINYINT}, #{effectiveTime,jdbcType=TIMESTAMP},
      #{expireTime,jdbcType=TIMESTAMP}, #{createTime,jdbcType=TIMESTAMP}, #{createBy,jdbcType=VARCHAR},
      #{modifiedTime,jdbcType=TIMESTAMP}, #{modifiedBy,jdbcType=VARCHAR})
      on DUPLICATE key
      UPDATE
        role_name = #{roleName,jdbcType=VARCHAR},
        is_active = #{isActive,jdbcType=TINYINT},
        is_authorizable = #{isAuthorizable,jdbcType=TINYINT},
        is_forever = #{isForever,jdbcType=TINYINT},
        effective_time = #{effectiveTime,jdbcType=TIMESTAMP},
        expire_time = #{expireTime,jdbcType=TIMESTAMP},
        create_time = #{createTime,jdbcType=TIMESTAMP},
        create_by = #{createBy,jdbcType=VARCHAR},
        modified_time = #{modifiedTime,jdbcType=TIMESTAMP},
        modified_by = #{modifiedBy,jdbcType=VARCHAR}
    </insert>

    <!--批量删除-->
    <delete id="deleteBatch" parameterType="java.util.List">
        delete from urc_role where id in
        <foreach collection="list" item="roleId" open="(" separator="," close=")">
            #{ roleId}
        </foreach>
    </delete>
    <!--根据角色Id获取角色信息-->
    <select id="getRoleByRoleId" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from urc_role
        where role_id = #{roleId,jdbcType=BIGINT}
    </select>
    <update id="update" parameterType="com.yks.urc.entity.RoleDO">
        update urc_role
        <set>
            <if test="roleName != null">
                role_name = #{roleName,jdbcType=VARCHAR},
            </if>
            <if test="isActive != null">
                is_active = #{isActive,jdbcType=TINYINT},
            </if>
            <if test="isAuthorizable != null">
                is_authorizable = #{isAuthorizable,jdbcType=TINYINT},
            </if>
            <if test="isForever != null">
                is_forever = #{isForever,jdbcType=TINYINT},
            </if>
            <if test="effectiveTime != null">
                effective_time = #{effectiveTime,jdbcType=TIMESTAMP},
            </if>
            <if test="expireTime != null">
                expire_time = #{expireTime,jdbcType=TIMESTAMP},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="createBy != null">
                create_by = #{createBy,jdbcType=VARCHAR},
            </if>
            <if test="modifiedTime != null">
                modified_time = #{modifiedTime,jdbcType=TIMESTAMP},
            </if>
            <if test="modifiedBy != null">
                modified_by = #{modifiedBy,jdbcType=VARCHAR},
            </if>
        </set>
        where role_id = #{roleId,jdbcType=CHAR}
    </update>
    <!--根据username/syskey获取角色功能权限-->
    <select id="getFuncJsonByUserAndSysKey" resultType="java.lang.String">
        select rp.selected_context
        from urc_user_role ur
        inner join urc_role r ON ur.role_id=r.role_id
        inner join urc_role_permission rp ON rp.role_id=r.role_id
        WHERE ur.user_name=#{userName} and rp.sys_key=#{sysKey}
        AND r.is_active=1
		AND (r.is_forever=1 or now() BETWEEN r.effective_time and r.expire_time)
    </select>

    <!--给定角色名的数据是否已存在-->
    <select id="checkDuplicateRoleName" resultType="Boolean">
        SELECT COUNT(id) > 0 FROM urc_role r
        <where>
            r.role_name = #{newRoleName}
            <if test="roleId != null">
                and r.id != #{roleId}
            </if>
        </where>
    </select>

    <!--判断给定的用户是否是管理员角色-->
    <select id="isAdminAccount" resultType="Boolean">
        SELECT COUNT(r.role_id) > 0 FROM urc_user_role ur
        LEFT JOIN urc_role r ON ur.role_id = r.role_id AND r.is_authorizable = 1
        WHERE ur.user_name = #{userName}
    </select>

    <!--根据角色名获取角色信息-->
    <select id="getByRoleName" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from urc_role
        where role_name = #{roleName,jdbcType=VARCHAR}
    </select>

    <!--分页条件查询-->
    <select id="listRolesByPage" parameterType="java.util.HashMap" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from urc_role
        <where>
            <if test="createBy != null and createBy != ''">
                create_by=#{createBy,jdbcType=VARCHAR}
            </if>
            <if test="roleDO.roleName != null and roleDO.roleName != ''">
                and role_name=#{roleDO.roleName,jdbcType=VARCHAR}
            </if>
            <if test="roleDO.remark != null and roleDO.remark != ''">
                and remark=#{roleDO.remark,jdbcType=VARCHAR}
            </if>
        </where>
        limit #{currIndex},#{pageSize}
    </select>

    <!--获取总条目-->
    <select id="getCounts" resultType="java.lang.Long">
        select count(1) from urc_role
        <where>
            <if test="createBy != null and createBy != ''">
                create_by=#{createBy,jdbcType=VARCHAR}
            </if>
        </where>
    </select>

</mapper>